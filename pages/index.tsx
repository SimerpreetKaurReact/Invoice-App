import { Grid } from '@mui/material'
import type { GetServerSideProps, NextPage } from 'next'
import Head from 'next/head'
import Image from 'next/image'
import { useRouter } from 'next/router'
import { useCallback, useContext, useEffect, useState } from 'react'
import { fetchClients } from '../src/api/base'
import ClientsContainer from '../src/clients/ClientsContainer'
import { ErrorBoundary } from '../src/components/ErrorBoundary'
import SkeltonLoadingList from '../src/components/SkeltonLoadingList'
import useAsync, { AsyncStateEnum } from '../src/hooks/useAsync'
import { InvoiceTableContainter } from '../src/invoice/invoiceTableContainer'
import AuthGuard from '../src/user/AuthGaurd'
import styles from '../styles/Home.module.css'
import ResponsiveAppBar from "../src/components/AppBar"
import { ClientsTableContainer } from '../src/clients/ClientTableContainer'
interface Company {
  name: string;
  vatNumber: string;
  regNumber: string;
  address: string;
};
interface Client {
  user_id: string;
  email: string;
  name: string;
  companyDetails: Company
  id: string;
  totalBilled: number;
  invoicesCount: number;
}
type AsyncState = 'initial' | 'pending' | 'success' | 'error'



const Home: NextPage<{ clients: Client[] | undefined }> = (props) => {
  const router = useRouter()

  const [loading, setLoading] = useState<boolean>(true)
  const [clientList, setClientList] = useState<Client[]>([])
  const [fetchStatus, setFetchStatus] = useState<AsyncState>("initial")


  const updateRoute = (property: string | {}) => {
    if (typeof (property) === "string") {
      router.push(property)
    } else {
      router.push({
        pathname: router.pathname,
        query: { ...router.query, ...property }
      })
    }
  }

  return (
    <ErrorBoundary>
      <AuthGuard>
        <ResponsiveAppBar />
        <div className={styles.container}>
          <Head>
            <title>Create Next App</title>
            <meta name="description" content="Generated by create next app" />
            <link rel="icon" href="/favicon.ico" />
          </Head>

          <main className={styles.main}>

            {/* <ul>

              {props.clients?.map((client) => {
                return <li key={client.id} >{client.name}</li>
              })}
            </ul> */}

            <Grid container spacing={2}>
              <Grid item md={6} xs={12}>
                {/* <ClientsContainer /> */}
                <ClientsTableContainer limit={10} sortBy='createdAt' sort={"desc"} updateRoute={updateRoute} editQuery={false} />
              </Grid>

              <Grid item md={6} xs={12}>
                <InvoiceTableContainter sortBy={"date"} sortOrder={"desc"} limit={10} updateRoute={updateRoute} editQuery={false} />
              </Grid>

            </Grid>
          </main>

          <footer className={styles.footer}>
            <a
              href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
              target="_blank"
              rel="noopener noreferrer"
            >
              Powered by{' '}
              <span className={styles.logo}>
                <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
              </span>
            </a>
          </footer>
        </div>

      </AuthGuard>
    </ErrorBoundary >

  )
}
export const getServerSideProps: GetServerSideProps = async () => {
  //const clients = await fetchClients()
  return {
    props: {
      clients: []
    }
  }
}
export default Home
